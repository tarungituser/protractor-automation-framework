/* eslint-disable global-require,no-undef,no-buffer-constructor,prefer-rest-params,no-unused-vars */
const { retry } = require('protractor-retry');
const { SpecReporter } = require('jasmine-spec-reporter');
const configSetup = require('./default-config-setup');

const autoGeneratedFolderName = 'auto-generated';
const TestRailReporter = require('@monotype/jasmine-testrail-reporter');

let trReporter = null;
let platform = '';
let browserName = '';
const commonConfigSetup = {
  onPrepareSetup() {
    retry.onPrepare();
    const origFn = browser.driver.controlFlow().execute;
    browser.driver.controlFlow().execute = function () {
      const args = arguments;
      origFn.call(browser.driver.controlFlow(), () =>
      // increase or reduce time value, its in millisecond
        protractor.promise.delayed(5));
      return origFn.apply(browser.driver.controlFlow(), args);
    };
    const log4js = require('log4js');
    const dateStamp = new Date().toUTCString().replace(/[^A-Z0-9]+/ig, '-').toLowerCase();
    log4js.configure({
      appenders: {
        multi: {
          type: 'multiFile',
          base: `${autoGeneratedFolderName}/logs/${(process.env.BUILD_NUMBER || dateStamp)}`,
          property: 'categoryName',
          extension: '.log',
        },
      },
      categories: {
        default: { appenders: ['multi'], level: 'all' },
      },
    });

    require('ts-node').register({
      project: 'e2e/jsconfig.e2e.json',
    });

    jasmine.getEnv().addReporter(new SpecReporter({
      spec: {
        displayStacktrace: 'all',
      },
    }));

    // catch Unhandled Promise Rejection errors
    process.on('unhandledRejection', (reason) => {
      console.log('Unhandled Rejection at:', reason.stack || reason);
    });

    return browser.getCapabilities().then((cap) => {
      platform = cap.get('platform');
      browserName = cap.get('browserName');
      browser.platform = platform;
      browser.browserName = browserName;
      commonConfigSetup.testRailSetup();
    });
  },
  teamcityReporterSetup() {
    const jasmineReporters = require('jasmine-reporters');
    jasmine.getEnv().addReporter(new jasmineReporters.TeamCityReporter());
  },
  allureReporterSetup() {
    const AllureReporter = require('jasmine-allure-reporter');
    const reporter = new AllureReporter({
      resultsDir: `${autoGeneratedFolderName}/allure-results`,
    });
    jasmine
      .getEnv()
      .addReporter(reporter);

    jasmine.getEnv().afterEach((done) => {
      browser.takeScreenshot().then((png) => {
        allure.createAttachment('Screenshot', () => new Buffer(png, 'base64'), 'image/png')();
        done();
      });
    });
  },
  testRailSetup() {
    trReporter = new TestRailReporter.Reporter(
      configSetup.params.testrail.host,
      configSetup.params.testrail.user, // AdUserName or email Id
      configSetup.params.testrail.password, // Password with Ad Username and Token with email Id
      configSetup.params.testrail.projectId, // Testrail Project Id
      // eslint-disable-next-line max-len
      configSetup.params.testrail.versionName, // process.env.version || browser.params.version which can be passed using --params.version
      platform, // e.g. Windows - Linux
      browserName,
    ); // e.g. Chrome/Mozilla,
    jasmine.getEnv().addReporter(trReporter);
  },
  testRailSetupOnComplete() {
    return trReporter.publishResults()
      .then((results) => {
        console.log('Test results are posted to test rail');
      })
      .catch((err) => {
        console.log(err.message);
      });
  },
  configureAllReporters() {
    commonConfigSetup.allureReporterSetup();
    return commonConfigSetup.onPrepareSetup();
  },
  onCleanUp(results) {
    retry.onCleanUp(results);
  },
  afterLaunch() {
    return retry.afterLaunch(configSetup.params.numberOfRetries);
  },
};

module.exports = commonConfigSetup;
